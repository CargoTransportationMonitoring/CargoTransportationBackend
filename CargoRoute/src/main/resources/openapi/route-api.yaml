openapi: 3.1.0
info:
  title: Cargo Tracking API
  version: 1.0.0

tags:
  - name: Route
    description: Route API

paths:
  /api/v1/route:
    post:
      summary: Создать новый маршрут
      security:
        - BearerAuth: [ ]
      description: Создает новый маршрут
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRouteRequest'
      responses:
        '201':
          description: Маршрут успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRouteResponse'
        '400':
          description: Ошибка валидации данных
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Недостаточно прав для выполнения операции
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Route

  /api/v1/route/{routeId}:
    get:
      summary: Получить информацию о маршруте
      security:
        - BearerAuth: [ ]
      parameters:
        - name: routeId
          in: path
          required: true
          schema:
            type: long
          description: Идентификатор маршрута
      responses:
        '200':
          description: Информация о маршруте
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRouteResponse'
        '404':
          description: Маршрут не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Route

    put:
      summary: Обновить маршрут
      security:
        - BearerAuth: [ ]
      parameters:
        - name: routeId
          in: path
          required: true
          schema:
            type: long
          description: Идентификатор маршрута
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRouteRequest'
      responses:
        '200':
          description: Маршрут успешно обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRouteResponse'
        '400':
          description: Ошибка валидации данных
        '403':
          description: Недостаточно прав для выполнения операции
        '404':
          description: Маршрут не найден
      tags:
        - Route

    delete:
      summary: Удалить маршрут
      security:
        - BearerAuth: [ ]
      parameters:
        - name: routeId
          in: path
          required: true
          schema:
            type: long
          description: Идентификатор маршрута
      responses:
        '204':
          description: Маршрут успешно удален
        '403':
          description: Недостаточно прав для выполнения операции
        '404':
          description: Маршрут не найден
      tags:
        - Route

  /api/v1/routes:
    get:
      summary: Получить список маршрутов
      security:
        - BearerAuth: [ ]
      description: Возвращает список маршрутов с поддержкой пагинации.
      parameters:
        - name: username
          in: query
          description: Фильтрация маршрутов по имени пользователя.
          required: false
          schema:
            type: string
        - name: routeStatus
          in: query
          description: Фильтрация маршрутов по статусу.
          required: false
          schema:
            type: string
            enum:
              - NEW
              - IN_PROGRESS
              - COMPLETED
            default: NEW
        - name: pointsNumberFrom
          in: query
          description: Фильтрация маршрутов по минимальному количеству точек в нем
          required: false
          schema:
            type: long
        - name: pointsNumberTo
          in: query
          description: Фильтрация маршрутов по максимальному количеству точек в нем
          required: false
          schema:
            type: long
        - name: description
          in: query
          description: Фильтрация маршрутов по описанию.
          required: false
          schema:
            type: string
        - name: routeName
          in: query
          description: Наименование маршрута
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PaginationResponse'
        '400':
          description: Ошибка валидации данных
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Route

  /api/v1/user/{userId}/routes-exist:
    get:
      summary: Получить информацию о наличии маршрутов у пользователя
      security:
        - BearerAuth: [ ]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: Идентификатор пользователя
      responses:
        '200':
          description: Есть ли у пользователя маршруты
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteExistResponse'
        '404':
          description: Пользователь не найден
      tags:
        - Route

  /api/v1/route/{routeId}/mark-points:
    put:
      summary: Пометить точки маршрута как посещенную
      security:
        - BearerAuth: [ ]
      parameters:
        - name: routeId
          in: path
          required: true
          schema:
            type: long
          description: Идентификатор маршрута
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MarkPointsRequest"
      responses:
        '200':
          description: Успешное выполнение
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/GetRouteResponse'
        '400':
          description: Ошибка запроса
        '404':
          description: Маршрут не найден
      tags:
        - Route

  /api/v1/user/{userId}/routes:
    get:
      summary: Получить список маршрутов пользователя
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: Id пользователя
        - name: routeStatus
          in: query
          description: Фильтр по статусу маршрута.
          required: false
          schema:
            type: string
            enum:
              - NEW
              - IN_PROGRESS
              - COMPLETED
            default: NEW
        - name: pointsNumberFrom
          in: query
          description: Фильтрация маршрутов по минимальному количеству точек в нем
          required: false
          schema:
            type: long
        - name: pointsNumberTo
          in: query
          description: Фильтрация маршрутов по максимальному количеству точек в нем
          required: false
          schema:
            type: long
        - name: description
          in: query
          description: Фильтрация маршрутов по описанию.
          required: false
          schema:
            type: string
        - name: routeName
          in: query
          description: Наименование маршрута
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PaginationResponse'
        '404':
          description: Маршруты не найдены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Route


components:

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    PaginationResponse:
      type: object
      properties:
        content:
          type: array
          items:
            type: long
            $ref: '#/components/schemas/RouteItem'
        totalPages:
          type: integer
          description: Общее количество страниц.
        totalElements:
          type: integer
          description: Общее количество элементов.
        last:
          type: boolean
          description: Признак последней страницы.
        size:
          type: integer
          minimum: 1
          description: Количество элементов на странице.
        number:
          type: integer
          minimum: 0
          description: Номер текущей страницы.
        numberOfElements:
          type: integer
          description: Количество элементов на текущей странице.
        first:
          type: boolean
          description: Признак первой страницы.
        empty:
          type: boolean
          description: Признак пустой страницы.

    CreateRouteRequest:
      type: object
      properties:
        id:
          type: long
          description: Уникальный идентификатор маршрута
        name:
          type: string
          description: Название маршрута
        description:
          type: string
          description: Описание маршрута
        assignedUsername:
          type: string
          description: Имя пользователя
        coordinates:
          type: array
          items:
            $ref: '#/components/schemas/CoordinateItem'
          description: Массив координат маршрута
      required:
        - coordinates

    GetRouteResponse:
      type: object
      properties:
        id:
          type: long
          description: Уникальный идентификатор созданного маршрута
        name:
          type: string
          description: Название маршрута
        description:
          type: string
          description: Описание маршрута
        assignedUsername:
          type: string
          description: Имя пользователя на которого назначен маршрут
        routeStatus:
          type: string
          description: Статус маршрута
        coordinates:
          type: array
          items:
            $ref: '#/components/schemas/CoordinateItem'
          description: Массив координат маршрута
      required:
        - id
        - coordinates

    RouteExistResponse:
      type: object
      properties:
        isUserExist:
          type: boolean

    MarkPointsRequest:
      type: object
      properties:
        routeStatus:
          type: string
          description: Статус маршрута
        coordinates:
          type: array
          description: Массив координат маршрута
          items:
            $ref: '#/components/schemas/CoordinateItem'

    RouteItem:
      type: object
      properties:
        id:
          type: long
          description: Идентификатор маршрута.
        name:
          type: string
          description: Название маршрута.
        description:
          type: string
          description: Описание маршрута.
        assignedUsername:
          type: string
          description: Имя пользователя, назначенного на маршрут.
        routeStatus:
          type: string
          enum: [ NEW, IN_PROGRESS, COMPLETED ]
          description: Статус маршрута.
        pointsCount:
          type: integer
          description: Количество точек маршрута.
        createdAt:
          type: string
          format: date-time
          description: Дата и время создания маршрута.
        updatedAt:
          type: string
          format: date-time
          description: Дата и время последнего обновления маршрута.

    CoordinateItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Уникальный идентификатор точки маршрута
        latitude:
          type: number
          format: float
          description: Широта
        longitude:
          type: number
          format: float
          description: Долгота
        isVisited:
          type: boolean
          description: Флаг посещения точки маршрута

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Описание ошибки
        status:
          type: string
          description: Статус ошибки

    CheckAdminResponse:
      type: object
      properties:
        isUserBelongAdmin:
          type: boolean
          description: флаг отвечающий за принадлежность пользователя к администратору

security:
  - bearerAuth: [ ]
